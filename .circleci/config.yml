# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
  
commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}
# Orchestrate or schedule a set of jobs
jobs:
  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo from print_hello
  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo from print_world
  build:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: "echo an env var that is part of our project"
          command: |
            echo $MY_ENV_VAR
       
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
      
  my_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
      
  my_hello_error:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: return 1
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail
          
  smoke_test:
      docker:
        - image: alpine:latest
      steps:
        - run: apk add --update curl
        - run:
            name: smoke test.
            command: |
              URL="https://blog.udacity.com/"
              if curl -s --head ${URL} # test if blog.udacity. com exists
              then
               return 0
              else
               return 1
              fi
      
workflows:      
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - my_job
      - welcome/run
      - print_hello
      - print_world:
          requires:
            - print_hello
      - build
      - save_hello_world_output
      - print_output_file:
          requires:
            - save_hello_world_output
      - my_hello_error
      - smoke_test
      
